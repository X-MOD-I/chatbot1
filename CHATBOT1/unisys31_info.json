{"L1s": [{"L1": "Introduction", "L2s": [{"L2": "Audience", "paragraphs": [{"context": "This guide provides information for system administrators and operators using the ClearPath Extension Kit . 1.2 . Documentation Updates This document contains all the information that was available at the time of publication . Changes identified after release of this document are included in problem list entry ( PLE ) 19271242 . To obtain a copy of the PLE , contact your Unisys representative or access the current PLE from the Unisys Product Support website : http : //www.support.unisys.com/all/ple/19271242 http : //www.support.unisys.com/all/ple/19271242 Note : If you are not logged into the Product Support site , you will be asked to do so . 1\u20132 Section 2 This section provides installation and configuration details for the ClearPath Extension Kit for OS 2200 ", "qas": []}]}]}, {"L1": "Getting Started with the ClearPath Extension Kit", "L2s": [{"L2": "Prerequisites", "paragraphs": [{"context": "The ClearPath Extension Kit is installable on the following platforms : \uf0b7 Dorado 4400/6400/8400 Plateau 3.0 or later \uf0b7 ClearPath OS 2200 Software Series 2.0 or later \uf0b7 Dorado 4500/6500/8500 Plateau 1.0 or later Refer to the following documents for installation of these base systems : \uf0b7 ClearPath OS 2200 Series Release 19.0 Software Planning and Migration Overview ( 7831 0349 ) \uf0b7 ClearPath Software Library Administrator ( SOLAR ) User Reference Manual ( 7831 0604 ) \uf0b7 ClearPath OS 2200 Software Products Installation Guide ( 7831 0612 ) ClearPath Extension Kit also requires version 9R2 or later of CIFS for ClearPath OS 2200 to be installed and operating . Refer to the CIFS for ClearPath OS 2200 User , Programmer , and Administrator Reference Manual ( 7859 6137 ) for more information ", "qas": []}]}, {"L2": "Installation and Configuration", "L3s": [{"L3": "Uninstalling the OS 2200 Components", "paragraphs": [{"context": "The NPC Loader and OS 2200 components need separate uninstallation . Follow the steps to perform the uninstall operation : 1 . Use the OS 2200 console to shutdown NPCBG . 2 . Log in to the OS 2200 using the CIFS administrator userid and use the rm-pkgs- add addstream to clean up the set of Native Extension packages . @ add sys $ nativex*install.rm-pkgs-add/add 3 . Delete the OS 2200 components using the SOLAR processor ", "qas": []}]}]}, {"L2": "NPC Loader Installation Upgrades", "paragraphs": [{"context": "The NPC Loader installation using the SAIL Control Center and the OS 2200 components installation using SOLAR or nxinstall.zip are designed to be upgradeable independently . The NPC Loader is designed to not require frequent upgrades . The Native Extension infrastructure components , including both the OS 2200 programs and the included x86-64 packages , are expected to require periodic upgrades . In both cases , updating can be done without uninstalling the prior versions . 2\u20136 Section 3 This section describes how to identify and obtain packages not supplied by Unisys and how to download and install them to augment those included with Native Extension infrastructure ", "qas": []}]}]}, {"L1": "ClearPath Extension Kit Packages", "L2s": [{"L2": "Packages not Supplied by Unisys", "paragraphs": [{"context": "The set of packages installed in the root directory under CIFS by the procedures described in Section provide a modest level of capability for programming and scripting in several modern languages . A wide variety of additional files including programming tools , run-time libraries , and entire applications are also available as RPMs from several sources ", "qas": []}]}, {"L2": "Packages Included with Native Extension Infrastructure", "paragraphs": [{"context": "Native Extension infrastructure packages are sourced from the openSUSE Leap 1 distribution repository on the openSUSE website . The following table provides the primary openSUSE packages included in this product . openSUSE Package Description bash The Bourne-Again Shell scripting language . GNU coreutils The basic file , shell , and text manipulation utilities of the GNU system . curl The utility for downloading files from the web . findutils The basic directory searching utilities provided with the GNU system . glibc-locale The locale files\u2014to support locales\u2014including different character sets and human languages . gawk The line editing utility . gcc The GNU C compiler . g++ The GNU C++ compiler . git A popular version control system . grep The text searching utility . openSUSE Package Description gzip The file packing utility . java-1_8_0-openjdk-devel A portable development environment . make A software building utility . python2 The programming language to read and execute Python 2.7 programs . python3 The programming language to read and execute Python 3 programs . python-xml Python utilities for using xml files . rpm The package manager . sed The line editing utility . subversion The version control system . tar The file packaging utility . unzip The unpacking utility . zip The unpacking utility . While these packages are sufficient to build and execute many programs , they provide only a small fraction of the capability of an open source software distribution , such as openSUSE . However , with the inclusion of the curl utility , and the file packing and unpacking tools , the base OS 2200 installation provides the tools needed to download any combination of packages needed to develop and Linux-compatible software for use on OS 2200 systems . Note : Unisys recommends that any packages desired for use on O", "qas": []}]}, {"L2": "Identifying and Downloading RPMs", "L3s": [{"L3": "Downloading RPMs using the curl Utility", "paragraphs": [{"context": "To download directly to your OS 2200 system , log in to the OS 2200 using the CIFS administrator userid and enter @ bash . You can then use the curl command to download your desired package from the repository directly into the current working directory . You will probably need to use the openSUSE search capability to determine the full name of the desired package . For example : bash-4.3 $ curl \u2013O \u2013L http : //download.opensuse.org/distribution/leap/1/repo/oss/x86_64/tcl -8.6.7-lp151.5.69.x86_64.rpm The curl utility will output its status as it performs the download . You can then verify that the download is succeeded : bash-4.3 $ ls -l tcl* -rw-r -- r -- 1 pacman [ none ] 2824340 Mar 3 15:56 tcl-8.6.7- lp151.5.69.x86_64.rp", "qas": []}]}, {"L3": "Installing Downloaded RPMs", "paragraphs": [{"context": "To install your package , use the rpm utility provided in the set of Native Extension infrastructure packages . For example , bash-4.3 $ rpm -i tcl-8.6.7-lp151.5.69.x86_64.rpm If this command gives no error message , it has succeeded in installing the files included in the package . You can use the query option to the rpm command to verify that the package has installed correctly . Note : For the query option , you need to provide the package name , rather than the full file name ( that is , remove the .rpm file extension ) . bash-4.3 $ rpm -q tcl-8.6.7-lp151.5.69.x86_64 tcl-8.6.7-lp151.5.69.x86_64 The file permissions for the installed package will not allow access for all users . Now , you will be able to log into the OS 2200 using a non-privileged userid and start using the new package , as shown in the following example : > @ 'nx tclsh % puts $ tcl_version 8.6 % info patchlevel 8.6.7 % exit ", "qas": []}]}, {"L3": "Resolving RPM Dependencies", "paragraphs": [{"context": "If your chosen package depends on other packages , the rpm installation command will fail with a message when required packages have not yet been installed as shown in the following example : bash-4.3 $ rpm -i < package-name > .rpm error : Failed dependencies : < required-package-name > is needed by < package-name > These dependencies are deliberately introduced by the package developers to reduce the need for including the same files in multiple packages . If one or more such messages appear , then the package installation fails and no package files are installed . The remedy to this problem is to first install the required packages , then install the originally chosen package . The required packages might in turn have requirements of their own . Some popular top-level packages have dependency hierarchies many levels deep , requiring dozens of additional packages . Fortunately , the rpm utility does a good job of checking the dependencies among packages . Several utilities , such as Yast , Zypper , and PackageKit automatically discover dependencies and assist with downloading and installing packages in the correct order . Unfortunately , these utilities all require root privilege to run , and so can not be used with the ClearPath Extension Kit . Package version issues In addition to dependency issues , rpm may issue error messages if you try to install an older version of package for which a newer version is already installed . Often , such issues can be resolved by upgrading required packages to a more recent version ", "qas": []}]}]}, {"L2": "Limitations", "paragraphs": [{"context": "Not all packages available in the openSUSE repositories will install and execute as expected in the ClearPath Extension Kit environment . Some packages supplied with Native Extension infrastructure remain untested in this environment , so functionality is not guaranteed . The most common problem is the use of privileged operations . Many common operations widely available in Linux execution environments routinely access privileged data or perform Linux-privileged operations , either during their startup or shutdown phases , or during the course of normal execution . Often , such use of Linux-privileged behavior is undocumented and can not be easily remedied , short of modifying the source packages , or choosing an alternate product . The ClearPath Extension Kit environment is designed with security aspects foremost , so no Linux-privileged operations are permissible ", "qas": []}]}, {"L2": "Adding Python\u00ae Packages", "paragraphs": [{"context": "ackages In addition to general purpose RPMs , the Python development community has evolved a series of mechanisms for sites and even individual users to package , contribute , and distribute open source packages for use by other Python users . Several packaging sites are available for uploading and downloading Python packages of various sizes , packaging mechanisms , and complexity . Commonly used sites for such packages are the Python Package Index , Anaconda , HomeBrew , and general package distribution services GitHub and BitBucket . Python packages can be downloaded and unpacked from all of these sites and installed in the ClearPath Extension Kit environment . In general , to ensure that all users can access the downloaded package files , the package should be installed using the CIFS administrator account , see section for more information . One common and easy method of downloading and installing packages from the PyPI service is using the pip command within the @ bash environment , which is included with the Python 2 and Python 3 RPMs provided by Native Extension infrastructure . In addition to basic installation and uninstallation services , the pip command manages dependencies among packages automatically , as RPM does for Linux packages generally , although these two do not interoperate . The pip command , using the -- user option , allows an unprivileged user to download and install packages for private use , requiring only setting of the PATH environment variable in order to access the installed files . In addition to these services , several systems , called Python virtual environments have been invented to allow sites , user groups , or individual users to install Python packages into an enclosed system such that it is not impacted by changes to the system wid", "qas": []}]}]}, {"L1": "Site-specific Configuration Options", "L2s": [{"L2": "Customize User Accounts", "paragraphs": [{"context": "For each user who initiates one of the ONCP commands ( for example , @ python , @ bash , @ nx , etc . ) , CIFS creates a top level directory under /home when any ONCP is executed for the first time . The default user experience can be improved by providing configuration files in these directories , appropriate to the various ONCPs . For example , to modify the default behavior of the @ bash command , the installer can provide a bash configuration file /home/ < userid > /.bashrc . Similarly , to instruct the @ bash command to include the current directory name as part of each input prompt , include the following command in the /home/ < userid > /.bashrc file : PS1= '' \\\\h : \\\\w # `` System administrators can also provide other site-specific commands using this method . 4.2 . Selecting the Default Python Version Python version 2 or version 3 can be invoked explicitly using the @ python2 or @ python3 processors respectively . Additionally , the ClearPath Extension Kit provides the @ python command , which can be a synonym for either @ python2 or @ python3 , according to the preference of the site administrator . The bash command /usr/sbin/alternatives can be used to determine whether version 2 or version 3 is the default . Refer to the Linux documentation for description of the alternatives command . When first installed , the Native Extension environment selects Python version 3 as the highest priority . Thus , the @ python command will default to be a synonym for the @ python3 command . To change the @ python command to be a synonym for @ python2 instead , perform the following steps : 1 . Login using the CIF", "qas": []}]}]}, {"L1": "Administering the Native Extension Environment", "L2s": [{"L2": "Configuring the Native Extension Environment", "paragraphs": [{"context": "The Native Extension environment can be configured using the file sys $ nativex*config.npcbg-cfig . This file is read during NPCBG startup and configuration settings persist until NPCBG is restarted or the NPC CONFIG console keyin is entered . The format for each line in the config file is : parameter = value Table provides the available global parameter names and their default values . Table . Global Parameters and their Default Values Parameter Name Value Type Default value Controls comapi_mode Single character A COMAPI mode used for communication within the Native Extension environment . cifs_port Five decimal digits 55001 TCP port number used for messages between OS 2200 CIFS and Native Extension processes , range : 49152\u201365535 . npcbg_port Five decimal digits 55002 TCP port number used for messages between NPCBG and NPCD , range : 49152\u2013 65535. user_port Five decimal digits 55003 TCP port number used for messages between Native Extension processes and ONCPs , range : 49152\u201365535 . share_name Alphanumeric string root CIFS share name of the root directory . npcd_log_level Alphabetic string ERROR The verbosity level of the messages used in Native Extension logging . max_oncps Decimal value 200 The maximum number of ONCPs that can be active at once . 5\u20132 Table . Global Parameters and their Default Values Parameter Name Value Type Default value Controls global_cpu_quota Decimal percentage value 100 % Percent of a system CPU core that the aggregate of all running Native Extension processes are allowed to consume . If more than 100 % , multiple cores can be used . global_memory_limit Decimal value Percent of system memory that the aggregate of all running Native Extension processes are allowed to consume . global_tasks_max Decimal value 1000 Maximum number of simultaneous tasks ( threads ) that all running Native Extension processes are allowed ", "qas": []}]}]}]}